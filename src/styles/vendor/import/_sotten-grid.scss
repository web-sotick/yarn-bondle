// desktop first breakpoints
$break_xxl : 1440px;
$break_xlg : 1320px;
$break_lg : 1024px;
$break_md : 920px;
$break_smd : 800px;
$break_sm : 768px;
$break_xs : 480px;

// media queries mixins
@mixin xxl {
    @media screen and (max-width: $break_xxl) {
        @content;
    }
}

@mixin xlg {
    @media screen and (max-width: $break_xlg) {
        @content;
    }
}

@mixin lg {
    @media screen and (max-width: $break_lg) {
        @content;
    }
}

@mixin md {
    @media screen and (max-width: $break_md) {
        @content;
    }
}

@mixin smd {
    @media screen and (max-width: $break_md) {
        @content;
    }
}

@mixin sm {
    @media screen and (max-width: $break_sm) {
        @content;
    }
}

@mixin xs {
    @media screen and (max-width: $break_xs) {
        @content;
    }
}

// container, variables and fluid mobile gutters
// $mob-padding: 15px;

:root {
    --content-width: 1320px;
    --gutter: 8px;
    --mob-padding: 60px;

    // @include lg{
    //     --mob-padding: 32px;
    // }

    @include lg{
        --mob-padding: 30px;
    }

    @include sm{
        --mob-padding: 16px;
    }

}

// default layout mixins
@mixin row($gutter:false) {
    display: flex;
    flex-wrap: wrap;
    clear: both;

    @if(type-of($gutter)==number) and ($gutter > 0) {
        @error "Unknown property `#{$gutter}`. Argument is gutter value and must be default, 0 or less than 0";
    }

    @else if $gutter {
        margin-left: $gutter;
        margin-right: $gutter;
    }

    @else {
        margin-left: calc(var(--gutter) * -1);
        margin-right: calc(var(--gutter) * -1);
    }

}

@mixin no-gutter {
    margin-left: 0;
    margin-right: 0;
}

@mixin col($gutter: var(--gutter)) {
    box-sizing: border-box;
    min-width: 0; // firefox fix Bug 1179454
    margin-left: $gutter;
    margin-right: $gutter;

    @if(type-of($gutter)==string) and ($gutter !=var(--gutter)) {
        @error "Unknown property `#{$gutter}`. Argument is gutter value and must be default, or in px,rem,em etc.";
    }

}

@mixin size($col, $gutter: var(--gutter)) {

    @if $col==auto {
        width: auto;
        flex-basis: auto;
        flex-grow: 0;
    }

    @else if $col==adaptive {
        width: 100%;
        flex-basis: 0;
        flex-grow: 1;
    }

    @else if(type-of($col)==number) and ($gutter != 0) {
        width: calc(100% * #{$col} - #{$gutter} * 2);
        flex-basis: calc(100% * #{$col} - #{$gutter} * 2);
        flex-grow: 0;
    }
    @else if(type-of($col)==number) and ($gutter = 0) {
        width: calc(100% * #{$col});
        flex-basis: calc(100% * #{$col});
        flex-grow: 0;
    }
 
    @else {
        @error "Argument value must be auto or adaptive or part of column count(e. g. 2/12).";
    }
}

@mixin offset($col:false, $gutter: var(--gutter)) {

    @if $col {
        margin-left: calc(100% * #{$col} + #{$gutter});
    }

    @else {
        margin-left: $gutter;
    }
}

// main container
.container {
    width: 100%;
    max-width: calc(var(--content-width) + var(--mob-padding) * 2);
    padding: 0 var(--mob-padding);
    margin: 0 auto;
}

.container-fluid {
    width: 100%;
    max-width: 100%;
}

// row
.row {
    @include row();

    &_no-gutter {
        @include no-gutter();
    }
}